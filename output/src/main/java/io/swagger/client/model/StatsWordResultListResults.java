/**
 * 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * Statistical information about a word
 */
@ApiModel(description = "Statistical information about a word")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2019-01-05T18:00:32.106-05:00")
public class StatsWordResultListResults   {
  @SerializedName("frequency")
  private Integer frequency = null;

  @SerializedName("lemma")
  private String lemma = null;

  @SerializedName("lexicalCategory")
  private String lexicalCategory = null;

  @SerializedName("normalizedFrequency")
  private Integer normalizedFrequency = null;

  @SerializedName("trueCase")
  private String trueCase = null;

  @SerializedName("wordform")
  private String wordform = null;

  public StatsWordResultListResults frequency(Integer frequency) {
    this.frequency = frequency;
    return this;
  }

   /**
   * The number of times a word appears in the entire corpus
   * @return frequency
  **/
  @ApiModelProperty(example = "null", required = true, value = "The number of times a word appears in the entire corpus")
  public Integer getFrequency() {
    return frequency;
  }

  public void setFrequency(Integer frequency) {
    this.frequency = frequency;
  }

  public StatsWordResultListResults lemma(String lemma) {
    this.lemma = lemma;
    return this;
  }

   /**
   * A lemma of the word.
   * @return lemma
  **/
  @ApiModelProperty(example = "null", required = true, value = "A lemma of the word.")
  public String getLemma() {
    return lemma;
  }

  public void setLemma(String lemma) {
    this.lemma = lemma;
  }

  public StatsWordResultListResults lexicalCategory(String lexicalCategory) {
    this.lexicalCategory = lexicalCategory;
    return this;
  }

   /**
   * A lexical category such as 'verb' or 'noun'
   * @return lexicalCategory
  **/
  @ApiModelProperty(example = "null", required = true, value = "A lexical category such as 'verb' or 'noun'")
  public String getLexicalCategory() {
    return lexicalCategory;
  }

  public void setLexicalCategory(String lexicalCategory) {
    this.lexicalCategory = lexicalCategory;
  }

  public StatsWordResultListResults normalizedFrequency(Integer normalizedFrequency) {
    this.normalizedFrequency = normalizedFrequency;
    return this;
  }

   /**
   * The number of times a word appears on average in 1 million words
   * @return normalizedFrequency
  **/
  @ApiModelProperty(example = "null", required = true, value = "The number of times a word appears on average in 1 million words")
  public Integer getNormalizedFrequency() {
    return normalizedFrequency;
  }

  public void setNormalizedFrequency(Integer normalizedFrequency) {
    this.normalizedFrequency = normalizedFrequency;
  }

  public StatsWordResultListResults trueCase(String trueCase) {
    this.trueCase = trueCase;
    return this;
  }

   /**
   * A given written realisation of a an entry (e.g., \"lay\") usually lower case
   * @return trueCase
  **/
  @ApiModelProperty(example = "null", required = true, value = "A given written realisation of a an entry (e.g., \"lay\") usually lower case")
  public String getTrueCase() {
    return trueCase;
  }

  public void setTrueCase(String trueCase) {
    this.trueCase = trueCase;
  }

  public StatsWordResultListResults wordform(String wordform) {
    this.wordform = wordform;
    return this;
  }

   /**
   * A given written realisation of a an entry (e.g., \"lay\") preserving case
   * @return wordform
  **/
  @ApiModelProperty(example = "null", required = true, value = "A given written realisation of a an entry (e.g., \"lay\") preserving case")
  public String getWordform() {
    return wordform;
  }

  public void setWordform(String wordform) {
    this.wordform = wordform;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatsWordResultListResults statsWordResultListResults = (StatsWordResultListResults) o;
    return Objects.equals(this.frequency, statsWordResultListResults.frequency) &&
        Objects.equals(this.lemma, statsWordResultListResults.lemma) &&
        Objects.equals(this.lexicalCategory, statsWordResultListResults.lexicalCategory) &&
        Objects.equals(this.normalizedFrequency, statsWordResultListResults.normalizedFrequency) &&
        Objects.equals(this.trueCase, statsWordResultListResults.trueCase) &&
        Objects.equals(this.wordform, statsWordResultListResults.wordform);
  }

  @Override
  public int hashCode() {
    return Objects.hash(frequency, lemma, lexicalCategory, normalizedFrequency, trueCase, wordform);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatsWordResultListResults {\n");
    
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    lemma: ").append(toIndentedString(lemma)).append("\n");
    sb.append("    lexicalCategory: ").append(toIndentedString(lexicalCategory)).append("\n");
    sb.append("    normalizedFrequency: ").append(toIndentedString(normalizedFrequency)).append("\n");
    sb.append("    trueCase: ").append(toIndentedString(trueCase)).append("\n");
    sb.append("    wordform: ").append(toIndentedString(wordform)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

