/**
 * 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Arrayofstrings;
import io.swagger.client.model.CategorizedTextList;
import io.swagger.client.model.CrossReferencesList;
import io.swagger.client.model.ExamplesList;
import io.swagger.client.model.PronunciationsList;
import io.swagger.client.model.Sense;
import io.swagger.client.model.ThesaurusLink;
import io.swagger.client.model.TranslationsList;
import io.swagger.client.model.VariantFormsList;
import java.util.ArrayList;
import java.util.List;


/**
 * A lexical sense represents the lexical meaning of a lexical entry when interpreted as referring to the corresponding ontology element
 */
@ApiModel(description = "A lexical sense represents the lexical meaning of a lexical entry when interpreted as referring to the corresponding ontology element")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2019-01-05T18:00:32.106-05:00")
public class Sense   {
  @SerializedName("crossReferenceMarkers")
  private Arrayofstrings crossReferenceMarkers = null;

  @SerializedName("crossReferences")
  private CrossReferencesList crossReferences = null;

  @SerializedName("definitions")
  private Arrayofstrings definitions = null;

  @SerializedName("domains")
  private Arrayofstrings domains = null;

  @SerializedName("examples")
  private ExamplesList examples = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("notes")
  private CategorizedTextList notes = null;

  @SerializedName("pronunciations")
  private PronunciationsList pronunciations = null;

  @SerializedName("regions")
  private Arrayofstrings regions = null;

  @SerializedName("registers")
  private Arrayofstrings registers = null;

  @SerializedName("short_definitions")
  private Arrayofstrings shortDefinitions = null;

  @SerializedName("subsenses")
  private List<Sense> subsenses = new ArrayList<Sense>();

  @SerializedName("thesaurusLinks")
  private List<ThesaurusLink> thesaurusLinks = new ArrayList<ThesaurusLink>();

  @SerializedName("translations")
  private TranslationsList translations = null;

  @SerializedName("variantForms")
  private VariantFormsList variantForms = null;

  public Sense crossReferenceMarkers(Arrayofstrings crossReferenceMarkers) {
    this.crossReferenceMarkers = crossReferenceMarkers;
    return this;
  }

   /**
   * A grouping of crossreference notes.
   * @return crossReferenceMarkers
  **/
  @ApiModelProperty(example = "null", value = "A grouping of crossreference notes.")
  public Arrayofstrings getCrossReferenceMarkers() {
    return crossReferenceMarkers;
  }

  public void setCrossReferenceMarkers(Arrayofstrings crossReferenceMarkers) {
    this.crossReferenceMarkers = crossReferenceMarkers;
  }

  public Sense crossReferences(CrossReferencesList crossReferences) {
    this.crossReferences = crossReferences;
    return this;
  }

   /**
   * Get crossReferences
   * @return crossReferences
  **/
  @ApiModelProperty(example = "null", value = "")
  public CrossReferencesList getCrossReferences() {
    return crossReferences;
  }

  public void setCrossReferences(CrossReferencesList crossReferences) {
    this.crossReferences = crossReferences;
  }

  public Sense definitions(Arrayofstrings definitions) {
    this.definitions = definitions;
    return this;
  }

   /**
   * A list of statements of the exact meaning of a word
   * @return definitions
  **/
  @ApiModelProperty(example = "null", value = "A list of statements of the exact meaning of a word")
  public Arrayofstrings getDefinitions() {
    return definitions;
  }

  public void setDefinitions(Arrayofstrings definitions) {
    this.definitions = definitions;
  }

  public Sense domains(Arrayofstrings domains) {
    this.domains = domains;
    return this;
  }

   /**
   * A subject, discipline, or branch of knowledge particular to the Sense
   * @return domains
  **/
  @ApiModelProperty(example = "null", value = "A subject, discipline, or branch of knowledge particular to the Sense")
  public Arrayofstrings getDomains() {
    return domains;
  }

  public void setDomains(Arrayofstrings domains) {
    this.domains = domains;
  }

  public Sense examples(ExamplesList examples) {
    this.examples = examples;
    return this;
  }

   /**
   * Get examples
   * @return examples
  **/
  @ApiModelProperty(example = "null", value = "")
  public ExamplesList getExamples() {
    return examples;
  }

  public void setExamples(ExamplesList examples) {
    this.examples = examples;
  }

  public Sense id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the sense that is required for the delete procedure
   * @return id
  **/
  @ApiModelProperty(example = "null", value = "The id of the sense that is required for the delete procedure")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Sense notes(CategorizedTextList notes) {
    this.notes = notes;
    return this;
  }

   /**
   * Get notes
   * @return notes
  **/
  @ApiModelProperty(example = "null", value = "")
  public CategorizedTextList getNotes() {
    return notes;
  }

  public void setNotes(CategorizedTextList notes) {
    this.notes = notes;
  }

  public Sense pronunciations(PronunciationsList pronunciations) {
    this.pronunciations = pronunciations;
    return this;
  }

   /**
   * Get pronunciations
   * @return pronunciations
  **/
  @ApiModelProperty(example = "null", value = "")
  public PronunciationsList getPronunciations() {
    return pronunciations;
  }

  public void setPronunciations(PronunciationsList pronunciations) {
    this.pronunciations = pronunciations;
  }

  public Sense regions(Arrayofstrings regions) {
    this.regions = regions;
    return this;
  }

   /**
   * A particular area in which the Sense occurs, e.g. 'Great Britain'
   * @return regions
  **/
  @ApiModelProperty(example = "null", value = "A particular area in which the Sense occurs, e.g. 'Great Britain'")
  public Arrayofstrings getRegions() {
    return regions;
  }

  public void setRegions(Arrayofstrings regions) {
    this.regions = regions;
  }

  public Sense registers(Arrayofstrings registers) {
    this.registers = registers;
    return this;
  }

   /**
   * A level of language usage, typically with respect to formality. e.g. 'offensive', 'informal'
   * @return registers
  **/
  @ApiModelProperty(example = "null", value = "A level of language usage, typically with respect to formality. e.g. 'offensive', 'informal'")
  public Arrayofstrings getRegisters() {
    return registers;
  }

  public void setRegisters(Arrayofstrings registers) {
    this.registers = registers;
  }

  public Sense shortDefinitions(Arrayofstrings shortDefinitions) {
    this.shortDefinitions = shortDefinitions;
    return this;
  }

   /**
   * A list of short statements of the exact meaning of a word
   * @return shortDefinitions
  **/
  @ApiModelProperty(example = "null", value = "A list of short statements of the exact meaning of a word")
  public Arrayofstrings getShortDefinitions() {
    return shortDefinitions;
  }

  public void setShortDefinitions(Arrayofstrings shortDefinitions) {
    this.shortDefinitions = shortDefinitions;
  }

  public Sense subsenses(List<Sense> subsenses) {
    this.subsenses = subsenses;
    return this;
  }

  public Sense addSubsensesItem(Sense subsensesItem) {
    this.subsenses.add(subsensesItem);
    return this;
  }

   /**
   * Ordered list of subsenses of a sense
   * @return subsenses
  **/
  @ApiModelProperty(example = "null", value = "Ordered list of subsenses of a sense")
  public List<Sense> getSubsenses() {
    return subsenses;
  }

  public void setSubsenses(List<Sense> subsenses) {
    this.subsenses = subsenses;
  }

  public Sense thesaurusLinks(List<ThesaurusLink> thesaurusLinks) {
    this.thesaurusLinks = thesaurusLinks;
    return this;
  }

  public Sense addThesaurusLinksItem(ThesaurusLink thesaurusLinksItem) {
    this.thesaurusLinks.add(thesaurusLinksItem);
    return this;
  }

   /**
   * Ordered list of links to the Thesaurus Dictionary
   * @return thesaurusLinks
  **/
  @ApiModelProperty(example = "null", value = "Ordered list of links to the Thesaurus Dictionary")
  public List<ThesaurusLink> getThesaurusLinks() {
    return thesaurusLinks;
  }

  public void setThesaurusLinks(List<ThesaurusLink> thesaurusLinks) {
    this.thesaurusLinks = thesaurusLinks;
  }

  public Sense translations(TranslationsList translations) {
    this.translations = translations;
    return this;
  }

   /**
   * Get translations
   * @return translations
  **/
  @ApiModelProperty(example = "null", value = "")
  public TranslationsList getTranslations() {
    return translations;
  }

  public void setTranslations(TranslationsList translations) {
    this.translations = translations;
  }

  public Sense variantForms(VariantFormsList variantForms) {
    this.variantForms = variantForms;
    return this;
  }

   /**
   * Various words that are used interchangeably depending on the context, e.g 'duck' and 'duck boat'
   * @return variantForms
  **/
  @ApiModelProperty(example = "null", value = "Various words that are used interchangeably depending on the context, e.g 'duck' and 'duck boat'")
  public VariantFormsList getVariantForms() {
    return variantForms;
  }

  public void setVariantForms(VariantFormsList variantForms) {
    this.variantForms = variantForms;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sense sense = (Sense) o;
    return Objects.equals(this.crossReferenceMarkers, sense.crossReferenceMarkers) &&
        Objects.equals(this.crossReferences, sense.crossReferences) &&
        Objects.equals(this.definitions, sense.definitions) &&
        Objects.equals(this.domains, sense.domains) &&
        Objects.equals(this.examples, sense.examples) &&
        Objects.equals(this.id, sense.id) &&
        Objects.equals(this.notes, sense.notes) &&
        Objects.equals(this.pronunciations, sense.pronunciations) &&
        Objects.equals(this.regions, sense.regions) &&
        Objects.equals(this.registers, sense.registers) &&
        Objects.equals(this.shortDefinitions, sense.shortDefinitions) &&
        Objects.equals(this.subsenses, sense.subsenses) &&
        Objects.equals(this.thesaurusLinks, sense.thesaurusLinks) &&
        Objects.equals(this.translations, sense.translations) &&
        Objects.equals(this.variantForms, sense.variantForms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(crossReferenceMarkers, crossReferences, definitions, domains, examples, id, notes, pronunciations, regions, registers, shortDefinitions, subsenses, thesaurusLinks, translations, variantForms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sense {\n");
    
    sb.append("    crossReferenceMarkers: ").append(toIndentedString(crossReferenceMarkers)).append("\n");
    sb.append("    crossReferences: ").append(toIndentedString(crossReferences)).append("\n");
    sb.append("    definitions: ").append(toIndentedString(definitions)).append("\n");
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    examples: ").append(toIndentedString(examples)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    pronunciations: ").append(toIndentedString(pronunciations)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    registers: ").append(toIndentedString(registers)).append("\n");
    sb.append("    shortDefinitions: ").append(toIndentedString(shortDefinitions)).append("\n");
    sb.append("    subsenses: ").append(toIndentedString(subsenses)).append("\n");
    sb.append("    thesaurusLinks: ").append(toIndentedString(thesaurusLinks)).append("\n");
    sb.append("    translations: ").append(toIndentedString(translations)).append("\n");
    sb.append("    variantForms: ").append(toIndentedString(variantForms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

