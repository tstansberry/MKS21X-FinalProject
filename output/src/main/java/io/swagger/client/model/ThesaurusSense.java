/**
 * 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Arrayofstrings;
import io.swagger.client.model.ExamplesList;
import io.swagger.client.model.SynonymsAntonyms;
import io.swagger.client.model.ThesaurusSense;
import java.util.ArrayList;
import java.util.List;


/**
 * A lexical sense represents the lexical meaning of a lexical entry when interpreted as referring to the corresponding ontology element
 */
@ApiModel(description = "A lexical sense represents the lexical meaning of a lexical entry when interpreted as referring to the corresponding ontology element")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2019-01-05T18:00:32.106-05:00")
public class ThesaurusSense   {
  @SerializedName("antonyms")
  private SynonymsAntonyms antonyms = null;

  @SerializedName("domains")
  private Arrayofstrings domains = null;

  @SerializedName("examples")
  private ExamplesList examples = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("regions")
  private Arrayofstrings regions = null;

  @SerializedName("registers")
  private Arrayofstrings registers = null;

  @SerializedName("subsenses")
  private List<ThesaurusSense> subsenses = new ArrayList<ThesaurusSense>();

  @SerializedName("synonyms")
  private SynonymsAntonyms synonyms = null;

  public ThesaurusSense antonyms(SynonymsAntonyms antonyms) {
    this.antonyms = antonyms;
    return this;
  }

   /**
   * antonym of word
   * @return antonyms
  **/
  @ApiModelProperty(example = "null", value = "antonym of word")
  public SynonymsAntonyms getAntonyms() {
    return antonyms;
  }

  public void setAntonyms(SynonymsAntonyms antonyms) {
    this.antonyms = antonyms;
  }

  public ThesaurusSense domains(Arrayofstrings domains) {
    this.domains = domains;
    return this;
  }

   /**
   * A subject, discipline, or branch of knowledge particular to the Sense
   * @return domains
  **/
  @ApiModelProperty(example = "null", value = "A subject, discipline, or branch of knowledge particular to the Sense")
  public Arrayofstrings getDomains() {
    return domains;
  }

  public void setDomains(Arrayofstrings domains) {
    this.domains = domains;
  }

  public ThesaurusSense examples(ExamplesList examples) {
    this.examples = examples;
    return this;
  }

   /**
   * Get examples
   * @return examples
  **/
  @ApiModelProperty(example = "null", value = "")
  public ExamplesList getExamples() {
    return examples;
  }

  public void setExamples(ExamplesList examples) {
    this.examples = examples;
  }

  public ThesaurusSense id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the sense that is required for the delete procedure
   * @return id
  **/
  @ApiModelProperty(example = "null", value = "The id of the sense that is required for the delete procedure")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ThesaurusSense regions(Arrayofstrings regions) {
    this.regions = regions;
    return this;
  }

   /**
   * A particular area in which the Sense occurs, e.g. 'Great Britain'
   * @return regions
  **/
  @ApiModelProperty(example = "null", value = "A particular area in which the Sense occurs, e.g. 'Great Britain'")
  public Arrayofstrings getRegions() {
    return regions;
  }

  public void setRegions(Arrayofstrings regions) {
    this.regions = regions;
  }

  public ThesaurusSense registers(Arrayofstrings registers) {
    this.registers = registers;
    return this;
  }

   /**
   * A level of language usage, typically with respect to formality. e.g. 'offensive', 'informal'
   * @return registers
  **/
  @ApiModelProperty(example = "null", value = "A level of language usage, typically with respect to formality. e.g. 'offensive', 'informal'")
  public Arrayofstrings getRegisters() {
    return registers;
  }

  public void setRegisters(Arrayofstrings registers) {
    this.registers = registers;
  }

  public ThesaurusSense subsenses(List<ThesaurusSense> subsenses) {
    this.subsenses = subsenses;
    return this;
  }

  public ThesaurusSense addSubsensesItem(ThesaurusSense subsensesItem) {
    this.subsenses.add(subsensesItem);
    return this;
  }

   /**
   * subsenses of word
   * @return subsenses
  **/
  @ApiModelProperty(example = "null", value = "subsenses of word")
  public List<ThesaurusSense> getSubsenses() {
    return subsenses;
  }

  public void setSubsenses(List<ThesaurusSense> subsenses) {
    this.subsenses = subsenses;
  }

  public ThesaurusSense synonyms(SynonymsAntonyms synonyms) {
    this.synonyms = synonyms;
    return this;
  }

   /**
   * synonym of word
   * @return synonyms
  **/
  @ApiModelProperty(example = "null", value = "synonym of word")
  public SynonymsAntonyms getSynonyms() {
    return synonyms;
  }

  public void setSynonyms(SynonymsAntonyms synonyms) {
    this.synonyms = synonyms;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThesaurusSense thesaurusSense = (ThesaurusSense) o;
    return Objects.equals(this.antonyms, thesaurusSense.antonyms) &&
        Objects.equals(this.domains, thesaurusSense.domains) &&
        Objects.equals(this.examples, thesaurusSense.examples) &&
        Objects.equals(this.id, thesaurusSense.id) &&
        Objects.equals(this.regions, thesaurusSense.regions) &&
        Objects.equals(this.registers, thesaurusSense.registers) &&
        Objects.equals(this.subsenses, thesaurusSense.subsenses) &&
        Objects.equals(this.synonyms, thesaurusSense.synonyms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(antonyms, domains, examples, id, regions, registers, subsenses, synonyms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThesaurusSense {\n");
    
    sb.append("    antonyms: ").append(toIndentedString(antonyms)).append("\n");
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    examples: ").append(toIndentedString(examples)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    registers: ").append(toIndentedString(registers)).append("\n");
    sb.append("    subsenses: ").append(toIndentedString(subsenses)).append("\n");
    sb.append("    synonyms: ").append(toIndentedString(synonyms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

