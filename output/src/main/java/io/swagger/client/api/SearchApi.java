/**
 * 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.Wordlist;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient apiClient;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for searchSourceLangGet */
    private com.squareup.okhttp.Call searchSourceLangGetCall(String sourceLang, String appId, String appKey, String q, Boolean prefix, String regions, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'sourceLang' is set
        if (sourceLang == null) {
            throw new ApiException("Missing the required parameter 'sourceLang' when calling searchSourceLangGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling searchSourceLangGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling searchSourceLangGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/search/{source_lang}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "source_lang" + "\\}", apiClient.escapeString(sourceLang.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "q", q));
        if (prefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "prefix", prefix));
        if (regions != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "regions", regions));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (appId != null)
        localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
        if (appKey != null)
        localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve possible matches to input
     *  Use this to retrieve possible [headword](documentation/glossary?term&#x3D;headword) matches for a given string of text. The results are culculated using headword matching, fuzzy matching, and [lemmatization](documentation/glossary?term&#x3D;lemma)     &lt;div id&#x3D;\&quot;search\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param q Search string (optional, default to eye)
     * @param prefix Set prefix to true if you&#39;d like to get results only starting with search string. (optional, default to false)
     * @param regions If searching in English, filter words with specific region(s) either &#39;us&#39; or &#39;gb&#39;. (optional)
     * @param limit Limit the number of results per response. Default and maximum limit is 5000. (optional)
     * @param offset Offset the start number of the result. (optional)
     * @return Wordlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Wordlist searchSourceLangGet(String sourceLang, String appId, String appKey, String q, Boolean prefix, String regions, String limit, String offset) throws ApiException {
        ApiResponse<Wordlist> resp = searchSourceLangGetWithHttpInfo(sourceLang, appId, appKey, q, prefix, regions, limit, offset);
        return resp.getData();
    }

    /**
     * Retrieve possible matches to input
     *  Use this to retrieve possible [headword](documentation/glossary?term&#x3D;headword) matches for a given string of text. The results are culculated using headword matching, fuzzy matching, and [lemmatization](documentation/glossary?term&#x3D;lemma)     &lt;div id&#x3D;\&quot;search\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param q Search string (optional, default to eye)
     * @param prefix Set prefix to true if you&#39;d like to get results only starting with search string. (optional, default to false)
     * @param regions If searching in English, filter words with specific region(s) either &#39;us&#39; or &#39;gb&#39;. (optional)
     * @param limit Limit the number of results per response. Default and maximum limit is 5000. (optional)
     * @param offset Offset the start number of the result. (optional)
     * @return ApiResponse&lt;Wordlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Wordlist> searchSourceLangGetWithHttpInfo(String sourceLang, String appId, String appKey, String q, Boolean prefix, String regions, String limit, String offset) throws ApiException {
        com.squareup.okhttp.Call call = searchSourceLangGetCall(sourceLang, appId, appKey, q, prefix, regions, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve possible matches to input (asynchronously)
     *  Use this to retrieve possible [headword](documentation/glossary?term&#x3D;headword) matches for a given string of text. The results are culculated using headword matching, fuzzy matching, and [lemmatization](documentation/glossary?term&#x3D;lemma)     &lt;div id&#x3D;\&quot;search\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param q Search string (optional, default to eye)
     * @param prefix Set prefix to true if you&#39;d like to get results only starting with search string. (optional, default to false)
     * @param regions If searching in English, filter words with specific region(s) either &#39;us&#39; or &#39;gb&#39;. (optional)
     * @param limit Limit the number of results per response. Default and maximum limit is 5000. (optional)
     * @param offset Offset the start number of the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchSourceLangGetAsync(String sourceLang, String appId, String appKey, String q, Boolean prefix, String regions, String limit, String offset, final ApiCallback<Wordlist> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchSourceLangGetCall(sourceLang, appId, appKey, q, prefix, regions, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for searchSourceSearchLanguageTranslationstargetSearchLanguageGet */
    private com.squareup.okhttp.Call searchSourceSearchLanguageTranslationstargetSearchLanguageGetCall(String sourceSearchLanguage, String targetSearchLanguage, String appId, String appKey, String q, Boolean prefix, String regions, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'sourceSearchLanguage' is set
        if (sourceSearchLanguage == null) {
            throw new ApiException("Missing the required parameter 'sourceSearchLanguage' when calling searchSourceSearchLanguageTranslationstargetSearchLanguageGet(Async)");
        }
        
        // verify the required parameter 'targetSearchLanguage' is set
        if (targetSearchLanguage == null) {
            throw new ApiException("Missing the required parameter 'targetSearchLanguage' when calling searchSourceSearchLanguageTranslationstargetSearchLanguageGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling searchSourceSearchLanguageTranslationstargetSearchLanguageGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling searchSourceSearchLanguageTranslationstargetSearchLanguageGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/search/{source_search_language}/translations&#x3D;{target_search_language}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "source_search_language" + "\\}", apiClient.escapeString(sourceSearchLanguage.toString()))
        .replaceAll("\\{" + "target_search_language" + "\\}", apiClient.escapeString(targetSearchLanguage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "q", q));
        if (prefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "prefix", prefix));
        if (regions != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "regions", regions));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (appId != null)
        localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
        if (appKey != null)
        localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve possible translation matches to input
     *  Use this to find matches in our translation dictionaries.    &lt;div id&#x3D;\&quot;search_translation\&quot;&gt;&lt;/div&gt; 
     * @param sourceSearchLanguage IANA language code (required)
     * @param targetSearchLanguage IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param q Search string. (optional, default to eye)
     * @param prefix Set prefix to true if you&#39;d like to get results only starting with search string. (optional, default to false)
     * @param regions Filter words with specific region(s) E.g., regions&#x3D;us. For now gb, us are available for en language. (optional)
     * @param limit Limit the number of results per response. Default and maximum limit is 5000. (optional)
     * @param offset Offset the start number of the result. (optional)
     * @return Wordlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Wordlist searchSourceSearchLanguageTranslationstargetSearchLanguageGet(String sourceSearchLanguage, String targetSearchLanguage, String appId, String appKey, String q, Boolean prefix, String regions, String limit, String offset) throws ApiException {
        ApiResponse<Wordlist> resp = searchSourceSearchLanguageTranslationstargetSearchLanguageGetWithHttpInfo(sourceSearchLanguage, targetSearchLanguage, appId, appKey, q, prefix, regions, limit, offset);
        return resp.getData();
    }

    /**
     * Retrieve possible translation matches to input
     *  Use this to find matches in our translation dictionaries.    &lt;div id&#x3D;\&quot;search_translation\&quot;&gt;&lt;/div&gt; 
     * @param sourceSearchLanguage IANA language code (required)
     * @param targetSearchLanguage IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param q Search string. (optional, default to eye)
     * @param prefix Set prefix to true if you&#39;d like to get results only starting with search string. (optional, default to false)
     * @param regions Filter words with specific region(s) E.g., regions&#x3D;us. For now gb, us are available for en language. (optional)
     * @param limit Limit the number of results per response. Default and maximum limit is 5000. (optional)
     * @param offset Offset the start number of the result. (optional)
     * @return ApiResponse&lt;Wordlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Wordlist> searchSourceSearchLanguageTranslationstargetSearchLanguageGetWithHttpInfo(String sourceSearchLanguage, String targetSearchLanguage, String appId, String appKey, String q, Boolean prefix, String regions, String limit, String offset) throws ApiException {
        com.squareup.okhttp.Call call = searchSourceSearchLanguageTranslationstargetSearchLanguageGetCall(sourceSearchLanguage, targetSearchLanguage, appId, appKey, q, prefix, regions, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve possible translation matches to input (asynchronously)
     *  Use this to find matches in our translation dictionaries.    &lt;div id&#x3D;\&quot;search_translation\&quot;&gt;&lt;/div&gt; 
     * @param sourceSearchLanguage IANA language code (required)
     * @param targetSearchLanguage IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param q Search string. (optional, default to eye)
     * @param prefix Set prefix to true if you&#39;d like to get results only starting with search string. (optional, default to false)
     * @param regions Filter words with specific region(s) E.g., regions&#x3D;us. For now gb, us are available for en language. (optional)
     * @param limit Limit the number of results per response. Default and maximum limit is 5000. (optional)
     * @param offset Offset the start number of the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchSourceSearchLanguageTranslationstargetSearchLanguageGetAsync(String sourceSearchLanguage, String targetSearchLanguage, String appId, String appKey, String q, Boolean prefix, String regions, String limit, String offset, final ApiCallback<Wordlist> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchSourceSearchLanguageTranslationstargetSearchLanguageGetCall(sourceSearchLanguage, targetSearchLanguage, appId, appKey, q, prefix, regions, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
