/**
 * 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.UtilityLabels;
import io.swagger.client.model.Filters;
import io.swagger.client.model.Languages;
import io.swagger.client.model.Regions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UtilityApi {
    private ApiClient apiClient;

    public UtilityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UtilityApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for domainsSourceDomainsLanguageTargetDomainsLanguageGet */
    private com.squareup.okhttp.Call domainsSourceDomainsLanguageTargetDomainsLanguageGetCall(String sourceDomainsLanguage, String targetDomainsLanguage, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'sourceDomainsLanguage' is set
        if (sourceDomainsLanguage == null) {
            throw new ApiException("Missing the required parameter 'sourceDomainsLanguage' when calling domainsSourceDomainsLanguageTargetDomainsLanguageGet(Async)");
        }
        
        // verify the required parameter 'targetDomainsLanguage' is set
        if (targetDomainsLanguage == null) {
            throw new ApiException("Missing the required parameter 'targetDomainsLanguage' when calling domainsSourceDomainsLanguageTargetDomainsLanguageGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling domainsSourceDomainsLanguageTargetDomainsLanguageGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling domainsSourceDomainsLanguageTargetDomainsLanguageGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/domains/{source_domains_language}/{target_domains_language}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "source_domains_language" + "\\}", apiClient.escapeString(sourceDomainsLanguage.toString()))
        .replaceAll("\\{" + "target_domains_language" + "\\}", apiClient.escapeString(targetDomainsLanguage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (appId != null)
        localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
        if (appKey != null)
        localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists available domains in a bilingual dataset
     * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given bilingual language dataset. 
     * @param sourceDomainsLanguage IANA language code (required)
     * @param targetDomainsLanguage IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return UtilityLabels
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UtilityLabels domainsSourceDomainsLanguageTargetDomainsLanguageGet(String sourceDomainsLanguage, String targetDomainsLanguage, String appId, String appKey) throws ApiException {
        ApiResponse<UtilityLabels> resp = domainsSourceDomainsLanguageTargetDomainsLanguageGetWithHttpInfo(sourceDomainsLanguage, targetDomainsLanguage, appId, appKey);
        return resp.getData();
    }

    /**
     * Lists available domains in a bilingual dataset
     * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given bilingual language dataset. 
     * @param sourceDomainsLanguage IANA language code (required)
     * @param targetDomainsLanguage IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;UtilityLabels&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UtilityLabels> domainsSourceDomainsLanguageTargetDomainsLanguageGetWithHttpInfo(String sourceDomainsLanguage, String targetDomainsLanguage, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = domainsSourceDomainsLanguageTargetDomainsLanguageGetCall(sourceDomainsLanguage, targetDomainsLanguage, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists available domains in a bilingual dataset (asynchronously)
     * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given bilingual language dataset. 
     * @param sourceDomainsLanguage IANA language code (required)
     * @param targetDomainsLanguage IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsSourceDomainsLanguageTargetDomainsLanguageGetAsync(String sourceDomainsLanguage, String targetDomainsLanguage, String appId, String appKey, final ApiCallback<UtilityLabels> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsSourceDomainsLanguageTargetDomainsLanguageGetCall(sourceDomainsLanguage, targetDomainsLanguage, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for domainsSourceLanguageGet */
    private com.squareup.okhttp.Call domainsSourceLanguageGetCall(String sourceLanguage, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'sourceLanguage' is set
        if (sourceLanguage == null) {
            throw new ApiException("Missing the required parameter 'sourceLanguage' when calling domainsSourceLanguageGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling domainsSourceLanguageGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling domainsSourceLanguageGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/domains/{source_language}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "source_language" + "\\}", apiClient.escapeString(sourceLanguage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (appId != null)
        localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
        if (appKey != null)
        localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists available domains in a monolingual dataset
     * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given monolingual language dataset. 
     * @param sourceLanguage IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return UtilityLabels
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UtilityLabels domainsSourceLanguageGet(String sourceLanguage, String appId, String appKey) throws ApiException {
        ApiResponse<UtilityLabels> resp = domainsSourceLanguageGetWithHttpInfo(sourceLanguage, appId, appKey);
        return resp.getData();
    }

    /**
     * Lists available domains in a monolingual dataset
     * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given monolingual language dataset. 
     * @param sourceLanguage IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;UtilityLabels&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UtilityLabels> domainsSourceLanguageGetWithHttpInfo(String sourceLanguage, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = domainsSourceLanguageGetCall(sourceLanguage, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists available domains in a monolingual dataset (asynchronously)
     * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given monolingual language dataset. 
     * @param sourceLanguage IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsSourceLanguageGetAsync(String sourceLanguage, String appId, String appKey, final ApiCallback<UtilityLabels> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsSourceLanguageGetCall(sourceLanguage, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for filtersEndpointGet */
    private com.squareup.okhttp.Call filtersEndpointGetCall(String endpoint, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'endpoint' is set
        if (endpoint == null) {
            throw new ApiException("Missing the required parameter 'endpoint' when calling filtersEndpointGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling filtersEndpointGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling filtersEndpointGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/filters/{endpoint}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "endpoint" + "\\}", apiClient.escapeString(endpoint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (appId != null)
        localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
        if (appKey != null)
        localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists available filters for specific endpoint
     * Returns a list of all the valid filters for a given endpoint to construct API calls. 
     * @param endpoint Name of the endpoint. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return Filters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Filters filtersEndpointGet(String endpoint, String appId, String appKey) throws ApiException {
        ApiResponse<Filters> resp = filtersEndpointGetWithHttpInfo(endpoint, appId, appKey);
        return resp.getData();
    }

    /**
     * Lists available filters for specific endpoint
     * Returns a list of all the valid filters for a given endpoint to construct API calls. 
     * @param endpoint Name of the endpoint. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;Filters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Filters> filtersEndpointGetWithHttpInfo(String endpoint, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = filtersEndpointGetCall(endpoint, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<Filters>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists available filters for specific endpoint (asynchronously)
     * Returns a list of all the valid filters for a given endpoint to construct API calls. 
     * @param endpoint Name of the endpoint. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call filtersEndpointGetAsync(String endpoint, String appId, String appKey, final ApiCallback<Filters> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = filtersEndpointGetCall(endpoint, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Filters>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for filtersGet */
    private com.squareup.okhttp.Call filtersGetCall(String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling filtersGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling filtersGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/filters".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (appId != null)
        localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
        if (appKey != null)
        localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists available filters
     * Returns a list of all the valid filters to construct API calls. 
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return Filters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Filters filtersGet(String appId, String appKey) throws ApiException {
        ApiResponse<Filters> resp = filtersGetWithHttpInfo(appId, appKey);
        return resp.getData();
    }

    /**
     * Lists available filters
     * Returns a list of all the valid filters to construct API calls. 
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;Filters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Filters> filtersGetWithHttpInfo(String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = filtersGetCall(appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<Filters>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists available filters (asynchronously)
     * Returns a list of all the valid filters to construct API calls. 
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call filtersGetAsync(String appId, String appKey, final ApiCallback<Filters> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = filtersGetCall(appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Filters>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for grammaticalFeaturesSourceLanguageGet */
    private com.squareup.okhttp.Call grammaticalFeaturesSourceLanguageGetCall(String sourceLanguage, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'sourceLanguage' is set
        if (sourceLanguage == null) {
            throw new ApiException("Missing the required parameter 'sourceLanguage' when calling grammaticalFeaturesSourceLanguageGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling grammaticalFeaturesSourceLanguageGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling grammaticalFeaturesSourceLanguageGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/grammaticalFeatures/{source_language}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "source_language" + "\\}", apiClient.escapeString(sourceLanguage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (appId != null)
        localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
        if (appKey != null)
        localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists available grammatical features in a dataset
     * Returns a list of the available [grammatical features](documentation/glossary?term&#x3D;grammaticalfeatures) for a given language dataset. 
     * @param sourceLanguage IANA language code. If provided output will be filtered by sourceLanguage. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return UtilityLabels
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UtilityLabels grammaticalFeaturesSourceLanguageGet(String sourceLanguage, String appId, String appKey) throws ApiException {
        ApiResponse<UtilityLabels> resp = grammaticalFeaturesSourceLanguageGetWithHttpInfo(sourceLanguage, appId, appKey);
        return resp.getData();
    }

    /**
     * Lists available grammatical features in a dataset
     * Returns a list of the available [grammatical features](documentation/glossary?term&#x3D;grammaticalfeatures) for a given language dataset. 
     * @param sourceLanguage IANA language code. If provided output will be filtered by sourceLanguage. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;UtilityLabels&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UtilityLabels> grammaticalFeaturesSourceLanguageGetWithHttpInfo(String sourceLanguage, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = grammaticalFeaturesSourceLanguageGetCall(sourceLanguage, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists available grammatical features in a dataset (asynchronously)
     * Returns a list of the available [grammatical features](documentation/glossary?term&#x3D;grammaticalfeatures) for a given language dataset. 
     * @param sourceLanguage IANA language code. If provided output will be filtered by sourceLanguage. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call grammaticalFeaturesSourceLanguageGetAsync(String sourceLanguage, String appId, String appKey, final ApiCallback<UtilityLabels> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = grammaticalFeaturesSourceLanguageGetCall(sourceLanguage, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for languagesGet */
    private com.squareup.okhttp.Call languagesGetCall(String appId, String appKey, String sourceLanguage, String targetLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling languagesGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling languagesGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/languages".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (sourceLanguage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sourceLanguage", sourceLanguage));
        if (targetLanguage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "targetLanguage", targetLanguage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (appId != null)
        localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
        if (appKey != null)
        localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists available dictionaries
     * Returns a list of monolingual and bilingual language datasets available in the API 
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param sourceLanguage IANA language code. If provided output will be filtered by sourceLanguage. (optional)
     * @param targetLanguage IANA language code. If provided output will be filtered by sourceLanguage. (optional)
     * @return Languages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Languages languagesGet(String appId, String appKey, String sourceLanguage, String targetLanguage) throws ApiException {
        ApiResponse<Languages> resp = languagesGetWithHttpInfo(appId, appKey, sourceLanguage, targetLanguage);
        return resp.getData();
    }

    /**
     * Lists available dictionaries
     * Returns a list of monolingual and bilingual language datasets available in the API 
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param sourceLanguage IANA language code. If provided output will be filtered by sourceLanguage. (optional)
     * @param targetLanguage IANA language code. If provided output will be filtered by sourceLanguage. (optional)
     * @return ApiResponse&lt;Languages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Languages> languagesGetWithHttpInfo(String appId, String appKey, String sourceLanguage, String targetLanguage) throws ApiException {
        com.squareup.okhttp.Call call = languagesGetCall(appId, appKey, sourceLanguage, targetLanguage, null, null);
        Type localVarReturnType = new TypeToken<Languages>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists available dictionaries (asynchronously)
     * Returns a list of monolingual and bilingual language datasets available in the API 
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param sourceLanguage IANA language code. If provided output will be filtered by sourceLanguage. (optional)
     * @param targetLanguage IANA language code. If provided output will be filtered by sourceLanguage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call languagesGetAsync(String appId, String appKey, String sourceLanguage, String targetLanguage, final ApiCallback<Languages> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = languagesGetCall(appId, appKey, sourceLanguage, targetLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Languages>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for lexicalcategoriesLanguageGet */
    private com.squareup.okhttp.Call lexicalcategoriesLanguageGetCall(String language, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling lexicalcategoriesLanguageGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling lexicalcategoriesLanguageGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling lexicalcategoriesLanguageGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/lexicalcategories/{language}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "language" + "\\}", apiClient.escapeString(language.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (appId != null)
        localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
        if (appKey != null)
        localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists available lexical categories in a dataset
     * Returns a list of available [lexical categories](documentation/glossary?term&#x3D;lexicalcategory) for a given language dataset. 
     * @param language IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return UtilityLabels
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UtilityLabels lexicalcategoriesLanguageGet(String language, String appId, String appKey) throws ApiException {
        ApiResponse<UtilityLabels> resp = lexicalcategoriesLanguageGetWithHttpInfo(language, appId, appKey);
        return resp.getData();
    }

    /**
     * Lists available lexical categories in a dataset
     * Returns a list of available [lexical categories](documentation/glossary?term&#x3D;lexicalcategory) for a given language dataset. 
     * @param language IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;UtilityLabels&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UtilityLabels> lexicalcategoriesLanguageGetWithHttpInfo(String language, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = lexicalcategoriesLanguageGetCall(language, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists available lexical categories in a dataset (asynchronously)
     * Returns a list of available [lexical categories](documentation/glossary?term&#x3D;lexicalcategory) for a given language dataset. 
     * @param language IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lexicalcategoriesLanguageGetAsync(String language, String appId, String appKey, final ApiCallback<UtilityLabels> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lexicalcategoriesLanguageGetCall(language, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for regionsSourceLanguageGet */
    private com.squareup.okhttp.Call regionsSourceLanguageGetCall(String sourceLanguage, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'sourceLanguage' is set
        if (sourceLanguage == null) {
            throw new ApiException("Missing the required parameter 'sourceLanguage' when calling regionsSourceLanguageGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling regionsSourceLanguageGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling regionsSourceLanguageGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/regions/{source_language}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "source_language" + "\\}", apiClient.escapeString(sourceLanguage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (appId != null)
        localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
        if (appKey != null)
        localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists available regions in a monolingual dataset
     * Returns a list of the available [regions](documentation/glossary?term&#x3D;regions) for a given monolingual language dataset. 
     * @param sourceLanguage IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return Regions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Regions regionsSourceLanguageGet(String sourceLanguage, String appId, String appKey) throws ApiException {
        ApiResponse<Regions> resp = regionsSourceLanguageGetWithHttpInfo(sourceLanguage, appId, appKey);
        return resp.getData();
    }

    /**
     * Lists available regions in a monolingual dataset
     * Returns a list of the available [regions](documentation/glossary?term&#x3D;regions) for a given monolingual language dataset. 
     * @param sourceLanguage IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;Regions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Regions> regionsSourceLanguageGetWithHttpInfo(String sourceLanguage, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = regionsSourceLanguageGetCall(sourceLanguage, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<Regions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists available regions in a monolingual dataset (asynchronously)
     * Returns a list of the available [regions](documentation/glossary?term&#x3D;regions) for a given monolingual language dataset. 
     * @param sourceLanguage IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call regionsSourceLanguageGetAsync(String sourceLanguage, String appId, String appKey, final ApiCallback<Regions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = regionsSourceLanguageGetCall(sourceLanguage, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Regions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for registersSourceLanguageGet */
    private com.squareup.okhttp.Call registersSourceLanguageGetCall(String sourceLanguage, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'sourceLanguage' is set
        if (sourceLanguage == null) {
            throw new ApiException("Missing the required parameter 'sourceLanguage' when calling registersSourceLanguageGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling registersSourceLanguageGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling registersSourceLanguageGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/registers/{source_language}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "source_language" + "\\}", apiClient.escapeString(sourceLanguage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (appId != null)
        localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
        if (appKey != null)
        localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists available registers in a  monolingual dataset
     * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given monolingual language dataset. 
     * @param sourceLanguage IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return UtilityLabels
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UtilityLabels registersSourceLanguageGet(String sourceLanguage, String appId, String appKey) throws ApiException {
        ApiResponse<UtilityLabels> resp = registersSourceLanguageGetWithHttpInfo(sourceLanguage, appId, appKey);
        return resp.getData();
    }

    /**
     * Lists available registers in a  monolingual dataset
     * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given monolingual language dataset. 
     * @param sourceLanguage IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;UtilityLabels&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UtilityLabels> registersSourceLanguageGetWithHttpInfo(String sourceLanguage, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = registersSourceLanguageGetCall(sourceLanguage, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists available registers in a  monolingual dataset (asynchronously)
     * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given monolingual language dataset. 
     * @param sourceLanguage IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registersSourceLanguageGetAsync(String sourceLanguage, String appId, String appKey, final ApiCallback<UtilityLabels> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registersSourceLanguageGetCall(sourceLanguage, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for registersSourceRegisterLanguageTargetRegisterLanguageGet */
    private com.squareup.okhttp.Call registersSourceRegisterLanguageTargetRegisterLanguageGetCall(String sourceRegisterLanguage, String targetRegisterLanguage, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'sourceRegisterLanguage' is set
        if (sourceRegisterLanguage == null) {
            throw new ApiException("Missing the required parameter 'sourceRegisterLanguage' when calling registersSourceRegisterLanguageTargetRegisterLanguageGet(Async)");
        }
        
        // verify the required parameter 'targetRegisterLanguage' is set
        if (targetRegisterLanguage == null) {
            throw new ApiException("Missing the required parameter 'targetRegisterLanguage' when calling registersSourceRegisterLanguageTargetRegisterLanguageGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling registersSourceRegisterLanguageTargetRegisterLanguageGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling registersSourceRegisterLanguageTargetRegisterLanguageGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/registers/{source_register_language}/{target_register_language}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "source_register_language" + "\\}", apiClient.escapeString(sourceRegisterLanguage.toString()))
        .replaceAll("\\{" + "target_register_language" + "\\}", apiClient.escapeString(targetRegisterLanguage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (appId != null)
        localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
        if (appKey != null)
        localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists available registers in a bilingual dataset
     * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given bilingual language dataset. 
     * @param sourceRegisterLanguage IANA language code (required)
     * @param targetRegisterLanguage IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return UtilityLabels
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UtilityLabels registersSourceRegisterLanguageTargetRegisterLanguageGet(String sourceRegisterLanguage, String targetRegisterLanguage, String appId, String appKey) throws ApiException {
        ApiResponse<UtilityLabels> resp = registersSourceRegisterLanguageTargetRegisterLanguageGetWithHttpInfo(sourceRegisterLanguage, targetRegisterLanguage, appId, appKey);
        return resp.getData();
    }

    /**
     * Lists available registers in a bilingual dataset
     * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given bilingual language dataset. 
     * @param sourceRegisterLanguage IANA language code (required)
     * @param targetRegisterLanguage IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;UtilityLabels&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UtilityLabels> registersSourceRegisterLanguageTargetRegisterLanguageGetWithHttpInfo(String sourceRegisterLanguage, String targetRegisterLanguage, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = registersSourceRegisterLanguageTargetRegisterLanguageGetCall(sourceRegisterLanguage, targetRegisterLanguage, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists available registers in a bilingual dataset (asynchronously)
     * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given bilingual language dataset. 
     * @param sourceRegisterLanguage IANA language code (required)
     * @param targetRegisterLanguage IANA language code (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registersSourceRegisterLanguageTargetRegisterLanguageGetAsync(String sourceRegisterLanguage, String targetRegisterLanguage, String appId, String appKey, final ApiCallback<UtilityLabels> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registersSourceRegisterLanguageTargetRegisterLanguageGetCall(sourceRegisterLanguage, targetRegisterLanguage, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
