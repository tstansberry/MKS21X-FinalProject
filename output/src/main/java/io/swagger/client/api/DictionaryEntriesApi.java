/**
 * 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.RetrieveEntry;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DictionaryEntriesApi {
    private ApiClient apiClient;

    public DictionaryEntriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DictionaryEntriesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for entriesSourceLangWordIdFiltersGet */
    private com.squareup.okhttp.Call entriesSourceLangWordIdFiltersGetCall(String sourceLang, String wordId, List<String> filters, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'sourceLang' is set
        if (sourceLang == null) {
            throw new ApiException("Missing the required parameter 'sourceLang' when calling entriesSourceLangWordIdFiltersGet(Async)");
        }
        
        // verify the required parameter 'wordId' is set
        if (wordId == null) {
            throw new ApiException("Missing the required parameter 'wordId' when calling entriesSourceLangWordIdFiltersGet(Async)");
        }
        
        // verify the required parameter 'filters' is set
        if (filters == null) {
            throw new ApiException("Missing the required parameter 'filters' when calling entriesSourceLangWordIdFiltersGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling entriesSourceLangWordIdFiltersGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling entriesSourceLangWordIdFiltersGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/entries/{source_lang}/{word_id}/{filters}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "source_lang" + "\\}", apiClient.escapeString(sourceLang.toString()))
        .replaceAll("\\{" + "word_id" + "\\}", apiClient.escapeString(wordId.toString()))
        .replaceAll("\\{" + "filters" + "\\}", apiClient.escapeString(filters.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (appId != null)
        localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
        if (appKey != null)
        localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Apply filters to response
     *  Use filters to limit the [entry](documentation/glossary?term&#x3D;entry) information that is returned. For example, you may only require definitions and not everything else, or just [pronunciations](documentation/glossary?term&#x3D;pronunciation). The full list of filters can be retrieved from the filters Utility endpoint. You can also specify values within the filter using &#39;&#x3D;&#39;. For example &#39;grammaticalFeatures&#x3D;singular&#39;. Filters can also be combined using a semicolon.    &lt;div id&#x3D;\&quot;dictionary_entries_filters\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code (required)
     * @param wordId An Entry identifier. Case-sensitive. (required)
     * @param filters Separate filtering conditions using a semicolon. Conditions take values grammaticalFeatures and/or lexicalCategory and are case-sensitive. To list multiple values in single condition divide them with comma. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return RetrieveEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetrieveEntry entriesSourceLangWordIdFiltersGet(String sourceLang, String wordId, List<String> filters, String appId, String appKey) throws ApiException {
        ApiResponse<RetrieveEntry> resp = entriesSourceLangWordIdFiltersGetWithHttpInfo(sourceLang, wordId, filters, appId, appKey);
        return resp.getData();
    }

    /**
     * Apply filters to response
     *  Use filters to limit the [entry](documentation/glossary?term&#x3D;entry) information that is returned. For example, you may only require definitions and not everything else, or just [pronunciations](documentation/glossary?term&#x3D;pronunciation). The full list of filters can be retrieved from the filters Utility endpoint. You can also specify values within the filter using &#39;&#x3D;&#39;. For example &#39;grammaticalFeatures&#x3D;singular&#39;. Filters can also be combined using a semicolon.    &lt;div id&#x3D;\&quot;dictionary_entries_filters\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code (required)
     * @param wordId An Entry identifier. Case-sensitive. (required)
     * @param filters Separate filtering conditions using a semicolon. Conditions take values grammaticalFeatures and/or lexicalCategory and are case-sensitive. To list multiple values in single condition divide them with comma. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;RetrieveEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetrieveEntry> entriesSourceLangWordIdFiltersGetWithHttpInfo(String sourceLang, String wordId, List<String> filters, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = entriesSourceLangWordIdFiltersGetCall(sourceLang, wordId, filters, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<RetrieveEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Apply filters to response (asynchronously)
     *  Use filters to limit the [entry](documentation/glossary?term&#x3D;entry) information that is returned. For example, you may only require definitions and not everything else, or just [pronunciations](documentation/glossary?term&#x3D;pronunciation). The full list of filters can be retrieved from the filters Utility endpoint. You can also specify values within the filter using &#39;&#x3D;&#39;. For example &#39;grammaticalFeatures&#x3D;singular&#39;. Filters can also be combined using a semicolon.    &lt;div id&#x3D;\&quot;dictionary_entries_filters\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code (required)
     * @param wordId An Entry identifier. Case-sensitive. (required)
     * @param filters Separate filtering conditions using a semicolon. Conditions take values grammaticalFeatures and/or lexicalCategory and are case-sensitive. To list multiple values in single condition divide them with comma. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entriesSourceLangWordIdFiltersGetAsync(String sourceLang, String wordId, List<String> filters, String appId, String appKey, final ApiCallback<RetrieveEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entriesSourceLangWordIdFiltersGetCall(sourceLang, wordId, filters, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetrieveEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for entriesSourceLangWordIdGet */
    private com.squareup.okhttp.Call entriesSourceLangWordIdGetCall(String sourceLang, String wordId, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'sourceLang' is set
        if (sourceLang == null) {
            throw new ApiException("Missing the required parameter 'sourceLang' when calling entriesSourceLangWordIdGet(Async)");
        }
        
        // verify the required parameter 'wordId' is set
        if (wordId == null) {
            throw new ApiException("Missing the required parameter 'wordId' when calling entriesSourceLangWordIdGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling entriesSourceLangWordIdGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling entriesSourceLangWordIdGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/entries/{source_lang}/{word_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "source_lang" + "\\}", apiClient.escapeString(sourceLang.toString()))
        .replaceAll("\\{" + "word_id" + "\\}", apiClient.escapeString(wordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (appId != null)
        localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
        if (appKey != null)
        localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve dictionary information for a given word
     *  Use this to retrieve definitions, [pronunciations](documentation/glossary?term&#x3D;pronunciation), example sentences, [grammatical information](documentation/glossary?term&#x3D;grammaticalfeatures) and [word origins](documentation/glossary?term&#x3D;etymology). It only works for dictionary [headwords](documentation/glossary?term&#x3D;headword), so you may need to use the [Lemmatron](documentation/glossary?term&#x3D;lemma) first if your input is likely to be an [inflected](documentation/glossary?term&#x3D;inflection) form (e.g., &#39;swimming&#39;). This would return the linked [headword](documentation/glossary?term&#x3D;headword) (e.g., &#39;swim&#39;) which you can then use in the Entries endpoint. Unless specified using a region filter, the default lookup will be the Oxford Dictionary of English (GB).    &lt;div id&#x3D;\&quot;dictionary_entries\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code (required)
     * @param wordId An Entry identifier. Case-sensitive. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return RetrieveEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetrieveEntry entriesSourceLangWordIdGet(String sourceLang, String wordId, String appId, String appKey) throws ApiException {
        ApiResponse<RetrieveEntry> resp = entriesSourceLangWordIdGetWithHttpInfo(sourceLang, wordId, appId, appKey);
        return resp.getData();
    }

    /**
     * Retrieve dictionary information for a given word
     *  Use this to retrieve definitions, [pronunciations](documentation/glossary?term&#x3D;pronunciation), example sentences, [grammatical information](documentation/glossary?term&#x3D;grammaticalfeatures) and [word origins](documentation/glossary?term&#x3D;etymology). It only works for dictionary [headwords](documentation/glossary?term&#x3D;headword), so you may need to use the [Lemmatron](documentation/glossary?term&#x3D;lemma) first if your input is likely to be an [inflected](documentation/glossary?term&#x3D;inflection) form (e.g., &#39;swimming&#39;). This would return the linked [headword](documentation/glossary?term&#x3D;headword) (e.g., &#39;swim&#39;) which you can then use in the Entries endpoint. Unless specified using a region filter, the default lookup will be the Oxford Dictionary of English (GB).    &lt;div id&#x3D;\&quot;dictionary_entries\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code (required)
     * @param wordId An Entry identifier. Case-sensitive. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;RetrieveEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetrieveEntry> entriesSourceLangWordIdGetWithHttpInfo(String sourceLang, String wordId, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = entriesSourceLangWordIdGetCall(sourceLang, wordId, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<RetrieveEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve dictionary information for a given word (asynchronously)
     *  Use this to retrieve definitions, [pronunciations](documentation/glossary?term&#x3D;pronunciation), example sentences, [grammatical information](documentation/glossary?term&#x3D;grammaticalfeatures) and [word origins](documentation/glossary?term&#x3D;etymology). It only works for dictionary [headwords](documentation/glossary?term&#x3D;headword), so you may need to use the [Lemmatron](documentation/glossary?term&#x3D;lemma) first if your input is likely to be an [inflected](documentation/glossary?term&#x3D;inflection) form (e.g., &#39;swimming&#39;). This would return the linked [headword](documentation/glossary?term&#x3D;headword) (e.g., &#39;swim&#39;) which you can then use in the Entries endpoint. Unless specified using a region filter, the default lookup will be the Oxford Dictionary of English (GB).    &lt;div id&#x3D;\&quot;dictionary_entries\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code (required)
     * @param wordId An Entry identifier. Case-sensitive. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entriesSourceLangWordIdGetAsync(String sourceLang, String wordId, String appId, String appKey, final ApiCallback<RetrieveEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entriesSourceLangWordIdGetCall(sourceLang, wordId, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetrieveEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for entriesSourceLangWordIdRegionsregionGet */
    private com.squareup.okhttp.Call entriesSourceLangWordIdRegionsregionGetCall(String sourceLang, String wordId, String region, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'sourceLang' is set
        if (sourceLang == null) {
            throw new ApiException("Missing the required parameter 'sourceLang' when calling entriesSourceLangWordIdRegionsregionGet(Async)");
        }
        
        // verify the required parameter 'wordId' is set
        if (wordId == null) {
            throw new ApiException("Missing the required parameter 'wordId' when calling entriesSourceLangWordIdRegionsregionGet(Async)");
        }
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling entriesSourceLangWordIdRegionsregionGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling entriesSourceLangWordIdRegionsregionGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling entriesSourceLangWordIdRegionsregionGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/entries/{source_lang}/{word_id}/regions&#x3D;{region}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "source_lang" + "\\}", apiClient.escapeString(sourceLang.toString()))
        .replaceAll("\\{" + "word_id" + "\\}", apiClient.escapeString(wordId.toString()))
        .replaceAll("\\{" + "region" + "\\}", apiClient.escapeString(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (appId != null)
        localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
        if (appKey != null)
        localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Specify GB or US dictionary for English entry search
     *  USe this filter to restrict the lookup to either our Oxford Dictionary of English (GB) or New Oxford American Dictionary (US). 
     * @param sourceLang IANA language code (required)
     * @param wordId An Entry identifier. Case-sensitive. (required)
     * @param region Region filter parameter. gb &#x3D; Oxford Dictionary of English. us &#x3D; New Oxford American Dictionary. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return RetrieveEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetrieveEntry entriesSourceLangWordIdRegionsregionGet(String sourceLang, String wordId, String region, String appId, String appKey) throws ApiException {
        ApiResponse<RetrieveEntry> resp = entriesSourceLangWordIdRegionsregionGetWithHttpInfo(sourceLang, wordId, region, appId, appKey);
        return resp.getData();
    }

    /**
     * Specify GB or US dictionary for English entry search
     *  USe this filter to restrict the lookup to either our Oxford Dictionary of English (GB) or New Oxford American Dictionary (US). 
     * @param sourceLang IANA language code (required)
     * @param wordId An Entry identifier. Case-sensitive. (required)
     * @param region Region filter parameter. gb &#x3D; Oxford Dictionary of English. us &#x3D; New Oxford American Dictionary. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;RetrieveEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetrieveEntry> entriesSourceLangWordIdRegionsregionGetWithHttpInfo(String sourceLang, String wordId, String region, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = entriesSourceLangWordIdRegionsregionGetCall(sourceLang, wordId, region, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<RetrieveEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Specify GB or US dictionary for English entry search (asynchronously)
     *  USe this filter to restrict the lookup to either our Oxford Dictionary of English (GB) or New Oxford American Dictionary (US). 
     * @param sourceLang IANA language code (required)
     * @param wordId An Entry identifier. Case-sensitive. (required)
     * @param region Region filter parameter. gb &#x3D; Oxford Dictionary of English. us &#x3D; New Oxford American Dictionary. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entriesSourceLangWordIdRegionsregionGetAsync(String sourceLang, String wordId, String region, String appId, String appKey, final ApiCallback<RetrieveEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entriesSourceLangWordIdRegionsregionGetCall(sourceLang, wordId, region, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetrieveEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
