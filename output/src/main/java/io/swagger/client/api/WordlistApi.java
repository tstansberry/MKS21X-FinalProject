/**
 * 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.Wordlist;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WordlistApi {
    private ApiClient apiClient;

    public WordlistApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WordlistApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for wordlistSourceLangFiltersAdvancedGet */
    private com.squareup.okhttp.Call wordlistSourceLangFiltersAdvancedGetCall(String sourceLang, String filtersAdvanced, String appId, String appKey, String exclude, String excludeSenses, String excludePrimeSenses, String wordLength, String prefix, Boolean exact, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'sourceLang' is set
        if (sourceLang == null) {
            throw new ApiException("Missing the required parameter 'sourceLang' when calling wordlistSourceLangFiltersAdvancedGet(Async)");
        }
        
        // verify the required parameter 'filtersAdvanced' is set
        if (filtersAdvanced == null) {
            throw new ApiException("Missing the required parameter 'filtersAdvanced' when calling wordlistSourceLangFiltersAdvancedGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling wordlistSourceLangFiltersAdvancedGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling wordlistSourceLangFiltersAdvancedGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/wordlist/{source_lang}/{filters_advanced}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "source_lang" + "\\}", apiClient.escapeString(sourceLang.toString()))
        .replaceAll("\\{" + "filters_advanced" + "\\}", apiClient.escapeString(filtersAdvanced.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (exclude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "exclude", exclude));
        if (excludeSenses != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "exclude_senses", excludeSenses));
        if (excludePrimeSenses != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "exclude_prime_senses", excludePrimeSenses));
        if (wordLength != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "word_length", wordLength));
        if (prefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "prefix", prefix));
        if (exact != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "exact", exact));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (appId != null)
        localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
        if (appKey != null)
        localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve list of words for category with advanced options
     * Use this to apply more complex filters to the [list of words](documentation/glossary?term&#x3D;wordlist). For example, you may only want to filter out words for which all [senses](documentation/glossary?term&#x3D;sense) match the filter, or only its &#39;prime sense&#39;. You can also filter by word length or match by substring (prefix).     &lt;div id&#x3D;\&quot;wordlist_advanced\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code (required)
     * @param filtersAdvanced Semicolon separated list of wordlist parameters, presented as value pairs: LexicalCategory, domains, regions, registers. Parameters can take comma separated list of values. E.g., lexicalCategory&#x3D;noun,adjective;domains&#x3D;sport. Number of values limited to 5. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param exclude Semicolon separated list of parameters-value pairs (same as filters). Excludes headwords that have any senses in specified exclusion attributes (lexical categories, domains, etc.) from results. (optional)
     * @param excludeSenses Semicolon separated list of parameters-value pairs (same as filters). Excludes only those senses of a particular headword that match specified exclusion attributes (lexical categories, domains, etc.) from results but includes the headword if it has other permitted senses. (optional)
     * @param excludePrimeSenses Semicolon separated list of parameters-value pairs (same as filters). Excludes a headword only if the primary sense matches the specified exclusion attributes (registers, domains only). (optional)
     * @param wordLength Parameter to speficy the minimum (&gt;), exact or maximum (&lt;) length of the words required. E.g., &gt;5 - more than 5 chars; &lt;4 - less than 4 chars; &gt;5&lt;10 - from 5 to 10 chars; 3 - exactly 3 chars. (optional, default to >5,<10)
     * @param prefix Filter words that start with prefix parameter (optional, default to goal)
     * @param exact If exact&#x3D;true wordlist returns a list of entries that exactly matches the search string. Otherwise wordlist lists entries that start with prefix string. (optional, default to false)
     * @param limit Limit the number of results per response. Default and maximum limit is 5000. (optional)
     * @param offset Offset the start number of the result. (optional)
     * @return Wordlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Wordlist wordlistSourceLangFiltersAdvancedGet(String sourceLang, String filtersAdvanced, String appId, String appKey, String exclude, String excludeSenses, String excludePrimeSenses, String wordLength, String prefix, Boolean exact, String limit, String offset) throws ApiException {
        ApiResponse<Wordlist> resp = wordlistSourceLangFiltersAdvancedGetWithHttpInfo(sourceLang, filtersAdvanced, appId, appKey, exclude, excludeSenses, excludePrimeSenses, wordLength, prefix, exact, limit, offset);
        return resp.getData();
    }

    /**
     * Retrieve list of words for category with advanced options
     * Use this to apply more complex filters to the [list of words](documentation/glossary?term&#x3D;wordlist). For example, you may only want to filter out words for which all [senses](documentation/glossary?term&#x3D;sense) match the filter, or only its &#39;prime sense&#39;. You can also filter by word length or match by substring (prefix).     &lt;div id&#x3D;\&quot;wordlist_advanced\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code (required)
     * @param filtersAdvanced Semicolon separated list of wordlist parameters, presented as value pairs: LexicalCategory, domains, regions, registers. Parameters can take comma separated list of values. E.g., lexicalCategory&#x3D;noun,adjective;domains&#x3D;sport. Number of values limited to 5. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param exclude Semicolon separated list of parameters-value pairs (same as filters). Excludes headwords that have any senses in specified exclusion attributes (lexical categories, domains, etc.) from results. (optional)
     * @param excludeSenses Semicolon separated list of parameters-value pairs (same as filters). Excludes only those senses of a particular headword that match specified exclusion attributes (lexical categories, domains, etc.) from results but includes the headword if it has other permitted senses. (optional)
     * @param excludePrimeSenses Semicolon separated list of parameters-value pairs (same as filters). Excludes a headword only if the primary sense matches the specified exclusion attributes (registers, domains only). (optional)
     * @param wordLength Parameter to speficy the minimum (&gt;), exact or maximum (&lt;) length of the words required. E.g., &gt;5 - more than 5 chars; &lt;4 - less than 4 chars; &gt;5&lt;10 - from 5 to 10 chars; 3 - exactly 3 chars. (optional, default to >5,<10)
     * @param prefix Filter words that start with prefix parameter (optional, default to goal)
     * @param exact If exact&#x3D;true wordlist returns a list of entries that exactly matches the search string. Otherwise wordlist lists entries that start with prefix string. (optional, default to false)
     * @param limit Limit the number of results per response. Default and maximum limit is 5000. (optional)
     * @param offset Offset the start number of the result. (optional)
     * @return ApiResponse&lt;Wordlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Wordlist> wordlistSourceLangFiltersAdvancedGetWithHttpInfo(String sourceLang, String filtersAdvanced, String appId, String appKey, String exclude, String excludeSenses, String excludePrimeSenses, String wordLength, String prefix, Boolean exact, String limit, String offset) throws ApiException {
        com.squareup.okhttp.Call call = wordlistSourceLangFiltersAdvancedGetCall(sourceLang, filtersAdvanced, appId, appKey, exclude, excludeSenses, excludePrimeSenses, wordLength, prefix, exact, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve list of words for category with advanced options (asynchronously)
     * Use this to apply more complex filters to the [list of words](documentation/glossary?term&#x3D;wordlist). For example, you may only want to filter out words for which all [senses](documentation/glossary?term&#x3D;sense) match the filter, or only its &#39;prime sense&#39;. You can also filter by word length or match by substring (prefix).     &lt;div id&#x3D;\&quot;wordlist_advanced\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code (required)
     * @param filtersAdvanced Semicolon separated list of wordlist parameters, presented as value pairs: LexicalCategory, domains, regions, registers. Parameters can take comma separated list of values. E.g., lexicalCategory&#x3D;noun,adjective;domains&#x3D;sport. Number of values limited to 5. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param exclude Semicolon separated list of parameters-value pairs (same as filters). Excludes headwords that have any senses in specified exclusion attributes (lexical categories, domains, etc.) from results. (optional)
     * @param excludeSenses Semicolon separated list of parameters-value pairs (same as filters). Excludes only those senses of a particular headword that match specified exclusion attributes (lexical categories, domains, etc.) from results but includes the headword if it has other permitted senses. (optional)
     * @param excludePrimeSenses Semicolon separated list of parameters-value pairs (same as filters). Excludes a headword only if the primary sense matches the specified exclusion attributes (registers, domains only). (optional)
     * @param wordLength Parameter to speficy the minimum (&gt;), exact or maximum (&lt;) length of the words required. E.g., &gt;5 - more than 5 chars; &lt;4 - less than 4 chars; &gt;5&lt;10 - from 5 to 10 chars; 3 - exactly 3 chars. (optional, default to >5,<10)
     * @param prefix Filter words that start with prefix parameter (optional, default to goal)
     * @param exact If exact&#x3D;true wordlist returns a list of entries that exactly matches the search string. Otherwise wordlist lists entries that start with prefix string. (optional, default to false)
     * @param limit Limit the number of results per response. Default and maximum limit is 5000. (optional)
     * @param offset Offset the start number of the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call wordlistSourceLangFiltersAdvancedGetAsync(String sourceLang, String filtersAdvanced, String appId, String appKey, String exclude, String excludeSenses, String excludePrimeSenses, String wordLength, String prefix, Boolean exact, String limit, String offset, final ApiCallback<Wordlist> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = wordlistSourceLangFiltersAdvancedGetCall(sourceLang, filtersAdvanced, appId, appKey, exclude, excludeSenses, excludePrimeSenses, wordLength, prefix, exact, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for wordlistSourceLangFiltersBasicGet */
    private com.squareup.okhttp.Call wordlistSourceLangFiltersBasicGetCall(String sourceLang, String filtersBasic, String appId, String appKey, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'sourceLang' is set
        if (sourceLang == null) {
            throw new ApiException("Missing the required parameter 'sourceLang' when calling wordlistSourceLangFiltersBasicGet(Async)");
        }
        
        // verify the required parameter 'filtersBasic' is set
        if (filtersBasic == null) {
            throw new ApiException("Missing the required parameter 'filtersBasic' when calling wordlistSourceLangFiltersBasicGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling wordlistSourceLangFiltersBasicGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling wordlistSourceLangFiltersBasicGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/wordlist/{source_lang}/{filters_basic}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "source_lang" + "\\}", apiClient.escapeString(sourceLang.toString()))
        .replaceAll("\\{" + "filters_basic" + "\\}", apiClient.escapeString(filtersBasic.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (appId != null)
        localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
        if (appKey != null)
        localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve a list of words in a category
     *  Use this to retrieve a [list of words](documentation/glossary?term&#x3D;wordlist) for particular [domain](documentation/glossary?term&#x3D;domain), [lexical category](documentation/glossary?term&#x3D;lexicalcategory), [register](documentation/glossary?term&#x3D;registers) and/or [region](documentation/glossary?term&#x3D;regions). View the full list of possible filters using the filters Utility endpoint.  The response only includes [headwords](documentation/glossary?term&#x3D;headword), not all their possible [inflections](documentation/glossary?term&#x3D;inflection). If you require a full [wordlist](documentation/glossary?term&#x3D;wordlist) including [inflected forms](documentation/glossary?term&#x3D;inflection), contact us and we can help.    &lt;div id&#x3D;\&quot;wordlist\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code (required)
     * @param filtersBasic Semicolon separated list of wordlist parameters, presented as value pairs: LexicalCategory, domains, regions, registers. Parameters can take comma separated list of values. E.g., lexicalCategory&#x3D;noun,adjective;domains&#x3D;sport. Number of values limited to 5. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param limit Limit the number of results per response. Default and maximum limit is 5000. (optional)
     * @param offset Offset the start number of the result (optional)
     * @return Wordlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Wordlist wordlistSourceLangFiltersBasicGet(String sourceLang, String filtersBasic, String appId, String appKey, String limit, String offset) throws ApiException {
        ApiResponse<Wordlist> resp = wordlistSourceLangFiltersBasicGetWithHttpInfo(sourceLang, filtersBasic, appId, appKey, limit, offset);
        return resp.getData();
    }

    /**
     * Retrieve a list of words in a category
     *  Use this to retrieve a [list of words](documentation/glossary?term&#x3D;wordlist) for particular [domain](documentation/glossary?term&#x3D;domain), [lexical category](documentation/glossary?term&#x3D;lexicalcategory), [register](documentation/glossary?term&#x3D;registers) and/or [region](documentation/glossary?term&#x3D;regions). View the full list of possible filters using the filters Utility endpoint.  The response only includes [headwords](documentation/glossary?term&#x3D;headword), not all their possible [inflections](documentation/glossary?term&#x3D;inflection). If you require a full [wordlist](documentation/glossary?term&#x3D;wordlist) including [inflected forms](documentation/glossary?term&#x3D;inflection), contact us and we can help.    &lt;div id&#x3D;\&quot;wordlist\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code (required)
     * @param filtersBasic Semicolon separated list of wordlist parameters, presented as value pairs: LexicalCategory, domains, regions, registers. Parameters can take comma separated list of values. E.g., lexicalCategory&#x3D;noun,adjective;domains&#x3D;sport. Number of values limited to 5. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param limit Limit the number of results per response. Default and maximum limit is 5000. (optional)
     * @param offset Offset the start number of the result (optional)
     * @return ApiResponse&lt;Wordlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Wordlist> wordlistSourceLangFiltersBasicGetWithHttpInfo(String sourceLang, String filtersBasic, String appId, String appKey, String limit, String offset) throws ApiException {
        com.squareup.okhttp.Call call = wordlistSourceLangFiltersBasicGetCall(sourceLang, filtersBasic, appId, appKey, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a list of words in a category (asynchronously)
     *  Use this to retrieve a [list of words](documentation/glossary?term&#x3D;wordlist) for particular [domain](documentation/glossary?term&#x3D;domain), [lexical category](documentation/glossary?term&#x3D;lexicalcategory), [register](documentation/glossary?term&#x3D;registers) and/or [region](documentation/glossary?term&#x3D;regions). View the full list of possible filters using the filters Utility endpoint.  The response only includes [headwords](documentation/glossary?term&#x3D;headword), not all their possible [inflections](documentation/glossary?term&#x3D;inflection). If you require a full [wordlist](documentation/glossary?term&#x3D;wordlist) including [inflected forms](documentation/glossary?term&#x3D;inflection), contact us and we can help.    &lt;div id&#x3D;\&quot;wordlist\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code (required)
     * @param filtersBasic Semicolon separated list of wordlist parameters, presented as value pairs: LexicalCategory, domains, regions, registers. Parameters can take comma separated list of values. E.g., lexicalCategory&#x3D;noun,adjective;domains&#x3D;sport. Number of values limited to 5. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param limit Limit the number of results per response. Default and maximum limit is 5000. (optional)
     * @param offset Offset the start number of the result (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call wordlistSourceLangFiltersBasicGetAsync(String sourceLang, String filtersBasic, String appId, String appKey, String limit, String offset, final ApiCallback<Wordlist> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = wordlistSourceLangFiltersBasicGetCall(sourceLang, filtersBasic, appId, appKey, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
