/**
 * 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.UtilityLabels;
import io.swagger.client.model.Filters;
import io.swagger.client.model.Languages;
import io.swagger.client.model.Regions;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UtilityApi
 */
public class UtilityApiTest {

    private final UtilityApi api = new UtilityApi();

    
    /**
     * Lists available domains in a bilingual dataset
     *
     * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given bilingual language dataset. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsSourceDomainsLanguageTargetDomainsLanguageGetTest() throws ApiException {
        String sourceDomainsLanguage = null;
        String targetDomainsLanguage = null;
        String appId = null;
        String appKey = null;
        // UtilityLabels response = api.domainsSourceDomainsLanguageTargetDomainsLanguageGet(sourceDomainsLanguage, targetDomainsLanguage, appId, appKey);

        // TODO: test validations
    }
    
    /**
     * Lists available domains in a monolingual dataset
     *
     * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given monolingual language dataset. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsSourceLanguageGetTest() throws ApiException {
        String sourceLanguage = null;
        String appId = null;
        String appKey = null;
        // UtilityLabels response = api.domainsSourceLanguageGet(sourceLanguage, appId, appKey);

        // TODO: test validations
    }
    
    /**
     * Lists available filters for specific endpoint
     *
     * Returns a list of all the valid filters for a given endpoint to construct API calls. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filtersEndpointGetTest() throws ApiException {
        String endpoint = null;
        String appId = null;
        String appKey = null;
        // Filters response = api.filtersEndpointGet(endpoint, appId, appKey);

        // TODO: test validations
    }
    
    /**
     * Lists available filters
     *
     * Returns a list of all the valid filters to construct API calls. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filtersGetTest() throws ApiException {
        String appId = null;
        String appKey = null;
        // Filters response = api.filtersGet(appId, appKey);

        // TODO: test validations
    }
    
    /**
     * Lists available grammatical features in a dataset
     *
     * Returns a list of the available [grammatical features](documentation/glossary?term&#x3D;grammaticalfeatures) for a given language dataset. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void grammaticalFeaturesSourceLanguageGetTest() throws ApiException {
        String sourceLanguage = null;
        String appId = null;
        String appKey = null;
        // UtilityLabels response = api.grammaticalFeaturesSourceLanguageGet(sourceLanguage, appId, appKey);

        // TODO: test validations
    }
    
    /**
     * Lists available dictionaries
     *
     * Returns a list of monolingual and bilingual language datasets available in the API 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void languagesGetTest() throws ApiException {
        String appId = null;
        String appKey = null;
        String sourceLanguage = null;
        String targetLanguage = null;
        // Languages response = api.languagesGet(appId, appKey, sourceLanguage, targetLanguage);

        // TODO: test validations
    }
    
    /**
     * Lists available lexical categories in a dataset
     *
     * Returns a list of available [lexical categories](documentation/glossary?term&#x3D;lexicalcategory) for a given language dataset. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lexicalcategoriesLanguageGetTest() throws ApiException {
        String language = null;
        String appId = null;
        String appKey = null;
        // UtilityLabels response = api.lexicalcategoriesLanguageGet(language, appId, appKey);

        // TODO: test validations
    }
    
    /**
     * Lists available regions in a monolingual dataset
     *
     * Returns a list of the available [regions](documentation/glossary?term&#x3D;regions) for a given monolingual language dataset. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void regionsSourceLanguageGetTest() throws ApiException {
        String sourceLanguage = null;
        String appId = null;
        String appKey = null;
        // Regions response = api.regionsSourceLanguageGet(sourceLanguage, appId, appKey);

        // TODO: test validations
    }
    
    /**
     * Lists available registers in a  monolingual dataset
     *
     * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given monolingual language dataset. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registersSourceLanguageGetTest() throws ApiException {
        String sourceLanguage = null;
        String appId = null;
        String appKey = null;
        // UtilityLabels response = api.registersSourceLanguageGet(sourceLanguage, appId, appKey);

        // TODO: test validations
    }
    
    /**
     * Lists available registers in a bilingual dataset
     *
     * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given bilingual language dataset. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registersSourceRegisterLanguageTargetRegisterLanguageGetTest() throws ApiException {
        String sourceRegisterLanguage = null;
        String targetRegisterLanguage = null;
        String appId = null;
        String appKey = null;
        // UtilityLabels response = api.registersSourceRegisterLanguageTargetRegisterLanguageGet(sourceRegisterLanguage, targetRegisterLanguage, appId, appKey);

        // TODO: test validations
    }
    
}
