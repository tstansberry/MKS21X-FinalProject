/**
 * 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Thesaurus;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ThesaurusApi
 */
public class ThesaurusApiTest {

    private final ThesaurusApi api = new ThesaurusApi();

    
    /**
     * Retrieve words that mean the opposite
     *
     *  Retrieve words that are opposite in meaning to the input word ([antonym](documentation/glossary?term&#x3D;thesaurus)).    &lt;div id&#x3D;\&quot;antonyms\&quot;&gt;&lt;/div&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entriesSourceLangWordIdAntonymsGetTest() throws ApiException {
        String sourceLang = null;
        String wordId = null;
        String appId = null;
        String appKey = null;
        // Thesaurus response = api.entriesSourceLangWordIdAntonymsGet(sourceLang, wordId, appId, appKey);

        // TODO: test validations
    }
    
    /**
     * Retrieve words that are similar
     *
     *  Use this to retrieve words that are similar in meaning to the input word ([synonym](documentation/glossary?term&#x3D;synonym)).    &lt;div id&#x3D;\&quot;synonyms\&quot;&gt;&lt;/div&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entriesSourceLangWordIdSynonymsGetTest() throws ApiException {
        String sourceLang = null;
        String wordId = null;
        String appId = null;
        String appKey = null;
        // Thesaurus response = api.entriesSourceLangWordIdSynonymsGet(sourceLang, wordId, appId, appKey);

        // TODO: test validations
    }
    
    /**
     * Retrieve synonyms and antonyms for a given word
     *
     *  Retrieve available [synonyms](documentation/glossary?term&#x3D;thesaurus) and [antonyms](documentation/glossary?term&#x3D;thesaurus) for a given word and language.     &lt;div id&#x3D;\&quot;synonyms_and_antonyms\&quot;&gt;&lt;/div&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entriesSourceLangWordIdSynonymsantonymsGetTest() throws ApiException {
        String sourceLang = null;
        String wordId = null;
        String appId = null;
        String appKey = null;
        // Thesaurus response = api.entriesSourceLangWordIdSynonymsantonymsGet(sourceLang, wordId, appId, appKey);

        // TODO: test validations
    }
    
}
