/**
 * 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.NgramsResult;
import io.swagger.client.model.StatsWordResult;
import io.swagger.client.model.StatsWordResultList;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LexiStatsApi
 */
public class LexiStatsApiTest {

    private final LexiStatsApi api = new LexiStatsApi();

    
    /**
     * Retrieve the frequency of ngrams (1-4) derived from a corpus
     *
     * This endpoint returns frequencies of ngrams of size 1-4. That is the number of times a word (ngram size &#x3D; 1) or words (ngram size &gt; 1) appear in the corpus. Ngrams are case sensitive (\&quot;I AM\&quot; and \&quot;I am\&quot; will have different frequency) and frequencies are calculated per word (true case) so \&quot;the book\&quot; and \&quot;the books\&quot; are two different ngrams. The results can be filtered based on query parameters. &lt;br&gt; &lt;br&gt; Parameters can be provided in PATH, GET or POST (form or json). The parameters in PATH are overridden by parameters in GET, POST and json (in that order). In PATH, individual options are separated by semicolon and values are separated by commas (where multiple values can be used). &lt;br&gt; &lt;br&gt; Example for bigrams (ngram of size 2): * PATH: /tokens&#x3D;a word,another word * GET: /?tokens&#x3D;a word&amp;tokens&#x3D;another word * POST (json):    &#x60;&#x60;&#x60;javascript     {         \&quot;tokens\&quot;: [\&quot;a word\&quot;, \&quot;another word\&quot;]     }   &#x60;&#x60;&#x60;  Either \&quot;tokens\&quot; or \&quot;contains\&quot; has to be provided. &lt;br&gt; &lt;br&gt; Some queries with \&quot;contains\&quot; or \&quot;sort\&quot; can exceed the 30s timeout, in which case the API will return an error message with status code 503. You mitigate this by providing additional restrictions such as \&quot;minFrequency\&quot; and \&quot;maxFrequency\&quot;. &lt;br&gt; &lt;br&gt; You can use the parameters \&quot;offset\&quot; and \&quot;limit\&quot; to paginate through large result sets. For convenience, the HTTP header \&quot;Link\&quot; is set on the response to provide links to \&quot;first\&quot;, \&quot;self\&quot;, \&quot;next\&quot;, \&quot;prev\&quot; and \&quot;last\&quot; pages of results (depending on the context). For example, if the result set contains 50 results and the parameter \&quot;limit\&quot; is set to 25, the Links header will contain an URL for the first 25 results and the next 25 results. &lt;br&gt; &lt;br&gt; Some libraries such as python&#39;s &#x60;requests&#x60; can parse the header automatically and offer a convenient way of iterating through the results. For example: &#x60;&#x60;&#x60;python def get_all_results(url):     while url:         r &#x3D; requests.get(url)         r.raise_for_status()         for item in r.json()[&#39;results&#39;]:           yield item         url &#x3D; r.links.get(&#39;next&#39;, {}).get(&#39;url&#39;) &#x60;&#x60;&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void statsFrequencyNgramsSourceLangCorpusNgramSizeGetTest() throws ApiException {
        String sourceLang = null;
        String corpus = null;
        String ngramSize = null;
        String appId = null;
        String appKey = null;
        String tokens = null;
        String contains = null;
        String punctuation = null;
        String format = null;
        Long minFrequency = null;
        Long maxFrequency = null;
        Long minDocumentFrequency = null;
        Long maxDocumentFrequency = null;
        String collate = null;
        String sort = null;
        Long offset = null;
        Long limit = null;
        // NgramsResult response = api.statsFrequencyNgramsSourceLangCorpusNgramSizeGet(sourceLang, corpus, ngramSize, appId, appKey, tokens, contains, punctuation, format, minFrequency, maxFrequency, minDocumentFrequency, maxDocumentFrequency, collate, sort, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Retrieve the frequency of a word derived from a corpus.
     *
     * This endpoint provides the frequency of a given word. When multiple database records match the query parameters, the returned frequency is the sum of the individual frequencies. For example, if the query parameters are lemma&#x3D;test, the returned frequency will include the verb \&quot;test\&quot;, the noun \&quot;test\&quot; and the adjective \&quot;test\&quot; in all forms (Test, tested, testing, etc.) &lt;br&gt; &lt;br&gt; If you are interested in the frequency of the word \&quot;test\&quot; but want to exclude other forms (e.g., tested) use the option trueCase&#x3D;test. Normally, the word \&quot;test\&quot; will be spelt with a capital letter at the beginning of a sentence. The option trueCase will ignore this and it will count \&quot;Test\&quot; and \&quot;test\&quot; as the same token. If you are interested in frequencies of \&quot;Test\&quot; and \&quot;test\&quot;, use the option wordform&#x3D;test or wordform&#x3D;Test. Note that trueCase is not just a lower case of the word as some words are genuinely spelt with a capital letter such as the word \&quot;press\&quot; in Oxford University Press. &lt;br&gt; &lt;br&gt; Parameters can be provided in PATH, GET or POST (form or json). The parameters in PATH are overriden by parameters in GET, POST and json (in that order). In PATH, individual options are separated by semicolon and values are separated by commas (where multiple values can be used). Examples: * PATH: /lemma&#x3D;test;lexicalCategory&#x3D;noun * GET: /?lemma&#x3D;test&amp;lexicalCategory&#x3D;noun * POST (json):    &#x60;&#x60;&#x60;javascript     {       \&quot;lemma\&quot;: \&quot;test\&quot;,       \&quot;lexicalCategory\&quot;: \&quot;noun\&quot;     }   &#x60;&#x60;&#x60;  &lt;br&gt; One of the options wordform/trueCase/lemma/lexicalCategory has to be provided. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void statsFrequencyWordSourceLangGetTest() throws ApiException {
        String sourceLang = null;
        String appId = null;
        String appKey = null;
        String corpus = null;
        String wordform = null;
        String trueCase = null;
        String lemma = null;
        String lexicalCategory = null;
        // StatsWordResult response = api.statsFrequencyWordSourceLangGet(sourceLang, appId, appKey, corpus, wordform, trueCase, lemma, lexicalCategory);

        // TODO: test validations
    }
    
    /**
     * Retrieve a list of frequencies of a word/words derived from a corpus.
     *
     * This endpoint provides a list of frequencies for a given word or words. Unlike the /word/ endpoint, the results are split into the smallest units. &lt;br&gt; &lt;br&gt; To exclude a specific value, prepend it with the minus sign (&#39;-&#39;). For example, to get frequencies of the lemma &#39;happy&#39; but exclude superlative forms (i.e., happiest) you could use options &#39;lemma&#x3D;happy;grammaticalFeatures&#x3D;-degreeType:superlative&#39;. &lt;br&gt; &lt;br&gt; Parameters can be provided in PATH, GET or POST (form or json). The parameters in PATH are overridden by parameters in GET, POST and json (in that order). In PATH, individual options are separated by semicolon and values are separated by commas (where multiple values can be used). &lt;br&gt; &lt;br&gt; The parameters wordform/trueCase/lemma/lexicalCategory also exist in a plural form, taking a lists of items. Examples: * PATH: /wordforms&#x3D;happy,happier,happiest * GET: /?wordforms&#x3D;happy&amp;wordforms&#x3D;happier&amp;wordforms&#x3D;happiest * POST (json): &#x60;&#x60;&#x60;javascript   {     \&quot;wordforms\&quot;: [\&quot;happy\&quot;, \&quot;happier\&quot;, \&quot;happiest\&quot;]   } &#x60;&#x60;&#x60; A mor complex example of retrieving frequencies of multiple lemmas: &#x60;&#x60;&#x60;   {       \&quot;lemmas\&quot;: [\&quot;happy\&quot;, \&quot;content\&quot;, \&quot;cheerful\&quot;, \&quot;cheery\&quot;, \&quot;merry\&quot;, \&quot;joyful\&quot;, \&quot;ecstatic\&quot;],       \&quot;grammaticalFeatures\&quot;: {           \&quot;adjectiveFunctionType\&quot;: \&quot;predicative\&quot;       },       \&quot;lexicalCategory\&quot;: \&quot;adjective\&quot;,       \&quot;sort\&quot;: [\&quot;lemma\&quot;, \&quot;-frequency\&quot;]   } &#x60;&#x60;&#x60; Some queries with \&quot;collate\&quot; or \&quot;sort\&quot; can exceed the 30s timeout, in which case the API will return an error message with status code 503. You mitigate this by providing additional restrictions such as \&quot;minFrequency\&quot; and \&quot;maxFrequency\&quot;. &lt;br&gt; &lt;br&gt; You can use the parameters \&quot;offset\&quot; and \&quot;limit\&quot; to paginate through large result sets. For convenience, the HTTP header \&quot;Link\&quot; is set on the response to provide links to \&quot;first\&quot;, \&quot;self\&quot;, \&quot;next\&quot;, \&quot;prev\&quot; and \&quot;last\&quot; pages of results (depending on the context). For example, if the result set contains 50 results and the parameter \&quot;limit\&quot; is set to 25, the Links header will contain an URL for the first 25 results and the next 25 results. &lt;br&gt; &lt;br&gt; Some libraries such as python&#39;s &#x60;requests&#x60; can parse the header automatically and offer a convenient way of iterating through the results. For example: &#x60;&#x60;&#x60;python def get_all_results(url):     while url:         r &#x3D; requests.get(url)         r.raise_for_status()         for item in r.json()[&#39;results&#39;]:           yield item         url &#x3D; r.links.get(&#39;next&#39;, {}).get(&#39;url&#39;) &#x60;&#x60;&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void statsFrequencyWordsSourceLangGetTest() throws ApiException {
        String sourceLang = null;
        String appId = null;
        String appKey = null;
        String corpus = null;
        String wordform = null;
        String trueCase = null;
        String lemma = null;
        String lexicalCategory = null;
        String grammaticalFeatures = null;
        String sort = null;
        String collate = null;
        Long minFrequency = null;
        Long maxFrequency = null;
        Float minNormalizedFrequency = null;
        Float maxNormalizedFrequency = null;
        Long offset = null;
        Long limit = null;
        // StatsWordResultList response = api.statsFrequencyWordsSourceLangGet(sourceLang, appId, appKey, corpus, wordform, trueCase, lemma, lexicalCategory, grammaticalFeatures, sort, collate, minFrequency, maxFrequency, minNormalizedFrequency, maxNormalizedFrequency, offset, limit);

        // TODO: test validations
    }
    
}
